// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// schema.prisma
//onDelete, CASCADE=>bij knex

model userTypes {
  userTypeId Int     @id @default(autoincrement())
  name       String   @unique
  users      users[]
}

model users {
  userId     Int       @id @default(autoincrement())
  username   String    @unique
  email      String    @unique
  password   String
  about      String?   @db.LongText
  userTypeId Int

  userType   userTypes @relation(fields: [userTypeId], references: [userTypeId])
  reviews    reviews[]
  movies     movies[]
}

model genres {
  genreId     Int           @id @default(autoincrement())
  genre       String        @unique
  genreMovies genreMovies[]
}

model movies {
  movieId     Int           @id @default(autoincrement())
  title       String
  synopsis    String      @db.LongText
  poster      String      @db.LongText
  userId      Int
  user        users         @relation(fields: [userId], references: [userId])
  reviews     reviews[]    
  genreMovies genreMovies[]  
}

model reviews {
  userId  Int
  movieId Int
  rating  Int
  review  String   @db.LongText
  date    DateTime @default(now())
  user    users    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  movie   movies   @relation(fields: [movieId], references: [movieId], onDelete: Cascade)
  //als een movie verwijdert wordt moeten alle reviews van een movie ook verwijderd worden
  @@id([userId, movieId])
}

model genreMovies {
  genreId Int
  movieId Int
  genre   genres @relation(fields: [genreId], references: [genreId])
  movie   movies @relation(fields: [movieId], references: [movieId], onDelete: Cascade)

  @@id([genreId, movieId])
}
